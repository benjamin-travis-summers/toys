#!/usr/bin/env haskellscript-10.0

-- TODO Close the pomodoro early if the tmux session ends.
-- TODO Find a way to open the tmux session in THIS terminal.

import HaskellScript

import qualified System.Process as Sys

--------------------------------------------------------------------------------------------------------------

main = do
    (pomoMins :: Int, pomoTitleText) ← getArgs <&> \case [n,sess] → (fromIntegral (read n), sess)

    let pomoTitle = pomoTitleText <> " (" <> show pomoMins <> "m)"

    startTime <- getCurrentTime

    let endTime = addUTCTime (fromIntegral pomoMins * 60) startTime

    outfile <- getHomeDirectory <&> (</> "POMODORO")

    let loop curTime = do
            let nextTick = addUTCTime 1 curTime

            let timeLeft = endTime `diffUTCTime` curTime
            let secsLeft = truncate timeLeft :: Integer
            let secs     = secsLeft `mod` 60
            let mins     = secsLeft `div` 60

            writeFileUtf8 outfile $ pack (printf "%02d:%02d" mins secs)

            when (secsLeft > 0) $ do
                sleepUntil nextTick
                loop nextTick

    pomoId <- lineToText <$> single
              (empty &
               inshell ("echo '"
                     <> pomoTitleText
                     <> "' | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g'"))

    pomoDir <- getHomeDirectory <&> (</> ("pomos" </> unpack pomoId))
    let workDir  = pomoDir
    let castFile = pomoDir </> "cast.json"
    createDirectoryIfMissing True workDir

    -- Start a tmux session in the working directory.
    empty & shell ("tmux new-session -d -c '" <> pack workDir <> "' -s '" <> pomoId <> "'")
    empty & shell ("cp ~/proj/toys/template/* '" <> pack workDir <> "'")
    empty & shell ("echo '% " <> pomoTitle <> "' > '" <> pack(workDir </> "index.md") <> "'")

    -- Tell the user how to join the session.
    putStrLn "Please run this command to attach to the tmux session for this pomodoro:"
    let cmd = "asciinema rec '"
           <> pack castFile
           <> "' -t '"
           <> pomoTitleText
           <> "' -c 'tmux attach -t \""
           <> pomoId
           <> "\"'"

    let tmuxSession = do
            putStrLn cmd
            (_, _, _, h) <- Sys.createProcess (Sys.shell (unpack cmd))
            _ <- Sys.waitForProcess h
            pure ()

    let timeout = do
            loop startTime
            empty & shell ("tmux kill-session -t '" <> pomoId <> "'")

    race_ tmuxSession timeout

    hash <- lineToText <$> single (empty & inshell ("ipfs add -q -r " <> pack pomoDir)
                                         & inshell "tail -n1")

    let publish = "/Users/benjamin/proj/chains/publish.sh"

    empty & shell (publish <> " " <> hash <> " '" <> pomoTitle <> "' pomodoro")

    removeDirectoryRecursive pomoDir
