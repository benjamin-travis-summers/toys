#!/usr/bin/env haskellscript-9.14

import HaskellScript

main = do
  pomoMins ← getArgs <&> \case []  → 50
                               [n] → fromIntegral (read n)

  startTime <- getCurrentTime

  let endTime = addUTCTime (pomoMins * 60) startTime

  putStrLn (show startTime <> " -> " <> show endTime)

  outfile <- (</> "POMODORO") <$> getHomeDirectory

  let loop curTime = do
        let nextTick = addUTCTime 1 curTime

        putStrLn (show curTime <> " -> " <> show nextTick)

        let timeLeft = endTime `diffUTCTime` curTime
        let secsLeft = truncate timeLeft :: Integer
        let secs     = secsLeft `mod` 60
        let mins     = secsLeft `div` 60

        writeFileUtf8 outfile $ pack (printf "%02d:%02d" mins secs)

        when (secsLeft > 0) $ do
          sleepUntil nextTick
          loop nextTick

  loop startTime
